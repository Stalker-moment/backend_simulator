
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model deviceAC
 * 
 */
export type deviceAC = $Result.DefaultSelection<Prisma.$deviceACPayload>
/**
 * Model LogsAC
 * 
 */
export type LogsAC = $Result.DefaultSelection<Prisma.$LogsACPayload>
/**
 * Model SensorAC
 * 
 */
export type SensorAC = $Result.DefaultSelection<Prisma.$SensorACPayload>
/**
 * Model OutputAC
 * 
 */
export type OutputAC = $Result.DefaultSelection<Prisma.$OutputACPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs>;

  /**
   * `prisma.deviceAC`: Exposes CRUD operations for the **deviceAC** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceACS
    * const deviceACS = await prisma.deviceAC.findMany()
    * ```
    */
  get deviceAC(): Prisma.deviceACDelegate<ExtArgs>;

  /**
   * `prisma.logsAC`: Exposes CRUD operations for the **LogsAC** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LogsACS
    * const logsACS = await prisma.logsAC.findMany()
    * ```
    */
  get logsAC(): Prisma.LogsACDelegate<ExtArgs>;

  /**
   * `prisma.sensorAC`: Exposes CRUD operations for the **SensorAC** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SensorACS
    * const sensorACS = await prisma.sensorAC.findMany()
    * ```
    */
  get sensorAC(): Prisma.SensorACDelegate<ExtArgs>;

  /**
   * `prisma.outputAC`: Exposes CRUD operations for the **OutputAC** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OutputACS
    * const outputACS = await prisma.outputAC.findMany()
    * ```
    */
  get outputAC(): Prisma.OutputACDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 5fe21811a6ba0b952a3bc71400666511fe3b902f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Contact: 'Contact',
    deviceAC: 'deviceAC',
    LogsAC: 'LogsAC',
    SensorAC: 'SensorAC',
    OutputAC: 'OutputAC'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "account" | "contact" | "deviceAC" | "logsAC" | "sensorAC" | "outputAC"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      deviceAC: {
        payload: Prisma.$deviceACPayload<ExtArgs>
        fields: Prisma.deviceACFieldRefs
        operations: {
          findUnique: {
            args: Prisma.deviceACFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.deviceACFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload>
          }
          findFirst: {
            args: Prisma.deviceACFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.deviceACFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload>
          }
          findMany: {
            args: Prisma.deviceACFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload>[]
          }
          create: {
            args: Prisma.deviceACCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload>
          }
          createMany: {
            args: Prisma.deviceACCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.deviceACCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload>[]
          }
          delete: {
            args: Prisma.deviceACDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload>
          }
          update: {
            args: Prisma.deviceACUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload>
          }
          deleteMany: {
            args: Prisma.deviceACDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.deviceACUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.deviceACUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deviceACPayload>
          }
          aggregate: {
            args: Prisma.DeviceACAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeviceAC>
          }
          groupBy: {
            args: Prisma.deviceACGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceACGroupByOutputType>[]
          }
          count: {
            args: Prisma.deviceACCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceACCountAggregateOutputType> | number
          }
        }
      }
      LogsAC: {
        payload: Prisma.$LogsACPayload<ExtArgs>
        fields: Prisma.LogsACFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogsACFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogsACFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload>
          }
          findFirst: {
            args: Prisma.LogsACFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogsACFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload>
          }
          findMany: {
            args: Prisma.LogsACFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload>[]
          }
          create: {
            args: Prisma.LogsACCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload>
          }
          createMany: {
            args: Prisma.LogsACCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogsACCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload>[]
          }
          delete: {
            args: Prisma.LogsACDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload>
          }
          update: {
            args: Prisma.LogsACUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload>
          }
          deleteMany: {
            args: Prisma.LogsACDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogsACUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LogsACUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogsACPayload>
          }
          aggregate: {
            args: Prisma.LogsACAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLogsAC>
          }
          groupBy: {
            args: Prisma.LogsACGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogsACGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogsACCountArgs<ExtArgs>
            result: $Utils.Optional<LogsACCountAggregateOutputType> | number
          }
        }
      }
      SensorAC: {
        payload: Prisma.$SensorACPayload<ExtArgs>
        fields: Prisma.SensorACFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SensorACFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SensorACFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload>
          }
          findFirst: {
            args: Prisma.SensorACFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SensorACFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload>
          }
          findMany: {
            args: Prisma.SensorACFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload>[]
          }
          create: {
            args: Prisma.SensorACCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload>
          }
          createMany: {
            args: Prisma.SensorACCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SensorACCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload>[]
          }
          delete: {
            args: Prisma.SensorACDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload>
          }
          update: {
            args: Prisma.SensorACUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload>
          }
          deleteMany: {
            args: Prisma.SensorACDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SensorACUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SensorACUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensorACPayload>
          }
          aggregate: {
            args: Prisma.SensorACAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSensorAC>
          }
          groupBy: {
            args: Prisma.SensorACGroupByArgs<ExtArgs>
            result: $Utils.Optional<SensorACGroupByOutputType>[]
          }
          count: {
            args: Prisma.SensorACCountArgs<ExtArgs>
            result: $Utils.Optional<SensorACCountAggregateOutputType> | number
          }
        }
      }
      OutputAC: {
        payload: Prisma.$OutputACPayload<ExtArgs>
        fields: Prisma.OutputACFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OutputACFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OutputACFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload>
          }
          findFirst: {
            args: Prisma.OutputACFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OutputACFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload>
          }
          findMany: {
            args: Prisma.OutputACFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload>[]
          }
          create: {
            args: Prisma.OutputACCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload>
          }
          createMany: {
            args: Prisma.OutputACCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OutputACCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload>[]
          }
          delete: {
            args: Prisma.OutputACDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload>
          }
          update: {
            args: Prisma.OutputACUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload>
          }
          deleteMany: {
            args: Prisma.OutputACDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OutputACUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OutputACUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutputACPayload>
          }
          aggregate: {
            args: Prisma.OutputACAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOutputAC>
          }
          groupBy: {
            args: Prisma.OutputACGroupByArgs<ExtArgs>
            result: $Utils.Optional<OutputACGroupByOutputType>[]
          }
          count: {
            args: Prisma.OutputACCountArgs<ExtArgs>
            result: $Utils.Optional<OutputACCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    email: string
    password: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contact?: boolean | Account$contactArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | Account$contactArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      contact: Prisma.$ContactPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contact<T extends Account$contactArgs<ExtArgs> = {}>(args?: Subset<T, Account$contactArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly email: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly role: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account.contact
   */
  export type Account$contactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    noReg: string | null
    profile: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    noReg: string | null
    profile: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phone: number
    noReg: number
    profile: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    noReg?: true
    profile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    noReg?: true
    profile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    noReg?: true
    profile?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    phone: string
    noReg: string | null
    profile: string | null
    createdAt: Date
    updatedAt: Date
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    noReg?: boolean
    profile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    noReg?: boolean
    profile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    noReg?: boolean
    profile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      phone: string
      noReg: string | null
      profile: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */ 
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly firstName: FieldRef<"Contact", 'String'>
    readonly lastName: FieldRef<"Contact", 'String'>
    readonly email: FieldRef<"Contact", 'String'>
    readonly phone: FieldRef<"Contact", 'String'>
    readonly noReg: FieldRef<"Contact", 'String'>
    readonly profile: FieldRef<"Contact", 'String'>
    readonly createdAt: FieldRef<"Contact", 'DateTime'>
    readonly updatedAt: FieldRef<"Contact", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model deviceAC
   */

  export type AggregateDeviceAC = {
    _count: DeviceACCountAggregateOutputType | null
    _avg: DeviceACAvgAggregateOutputType | null
    _sum: DeviceACSumAggregateOutputType | null
    _min: DeviceACMinAggregateOutputType | null
    _max: DeviceACMaxAggregateOutputType | null
  }

  export type DeviceACAvgAggregateOutputType = {
    id: number | null
  }

  export type DeviceACSumAggregateOutputType = {
    id: number | null
  }

  export type DeviceACMinAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    SSID: string | null
    PASSWORD: string | null
    IP: string | null
    updatedAt: Date | null
  }

  export type DeviceACMaxAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    SSID: string | null
    PASSWORD: string | null
    IP: string | null
    updatedAt: Date | null
  }

  export type DeviceACCountAggregateOutputType = {
    id: number
    timestamp: number
    SSID: number
    PASSWORD: number
    IP: number
    updatedAt: number
    _all: number
  }


  export type DeviceACAvgAggregateInputType = {
    id?: true
  }

  export type DeviceACSumAggregateInputType = {
    id?: true
  }

  export type DeviceACMinAggregateInputType = {
    id?: true
    timestamp?: true
    SSID?: true
    PASSWORD?: true
    IP?: true
    updatedAt?: true
  }

  export type DeviceACMaxAggregateInputType = {
    id?: true
    timestamp?: true
    SSID?: true
    PASSWORD?: true
    IP?: true
    updatedAt?: true
  }

  export type DeviceACCountAggregateInputType = {
    id?: true
    timestamp?: true
    SSID?: true
    PASSWORD?: true
    IP?: true
    updatedAt?: true
    _all?: true
  }

  export type DeviceACAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deviceAC to aggregate.
     */
    where?: deviceACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deviceACS to fetch.
     */
    orderBy?: deviceACOrderByWithRelationInput | deviceACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: deviceACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deviceACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deviceACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deviceACS
    **/
    _count?: true | DeviceACCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceACAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceACSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceACMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceACMaxAggregateInputType
  }

  export type GetDeviceACAggregateType<T extends DeviceACAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceAC]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceAC[P]>
      : GetScalarType<T[P], AggregateDeviceAC[P]>
  }




  export type deviceACGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deviceACWhereInput
    orderBy?: deviceACOrderByWithAggregationInput | deviceACOrderByWithAggregationInput[]
    by: DeviceACScalarFieldEnum[] | DeviceACScalarFieldEnum
    having?: deviceACScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceACCountAggregateInputType | true
    _avg?: DeviceACAvgAggregateInputType
    _sum?: DeviceACSumAggregateInputType
    _min?: DeviceACMinAggregateInputType
    _max?: DeviceACMaxAggregateInputType
  }

  export type DeviceACGroupByOutputType = {
    id: number
    timestamp: Date
    SSID: string
    PASSWORD: string
    IP: string
    updatedAt: Date
    _count: DeviceACCountAggregateOutputType | null
    _avg: DeviceACAvgAggregateOutputType | null
    _sum: DeviceACSumAggregateOutputType | null
    _min: DeviceACMinAggregateOutputType | null
    _max: DeviceACMaxAggregateOutputType | null
  }

  type GetDeviceACGroupByPayload<T extends deviceACGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceACGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceACGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceACGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceACGroupByOutputType[P]>
        }
      >
    >


  export type deviceACSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    SSID?: boolean
    PASSWORD?: boolean
    IP?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceAC"]>

  export type deviceACSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    SSID?: boolean
    PASSWORD?: boolean
    IP?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceAC"]>

  export type deviceACSelectScalar = {
    id?: boolean
    timestamp?: boolean
    SSID?: boolean
    PASSWORD?: boolean
    IP?: boolean
    updatedAt?: boolean
  }


  export type $deviceACPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "deviceAC"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      timestamp: Date
      SSID: string
      PASSWORD: string
      IP: string
      updatedAt: Date
    }, ExtArgs["result"]["deviceAC"]>
    composites: {}
  }

  type deviceACGetPayload<S extends boolean | null | undefined | deviceACDefaultArgs> = $Result.GetResult<Prisma.$deviceACPayload, S>

  type deviceACCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<deviceACFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DeviceACCountAggregateInputType | true
    }

  export interface deviceACDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['deviceAC'], meta: { name: 'deviceAC' } }
    /**
     * Find zero or one DeviceAC that matches the filter.
     * @param {deviceACFindUniqueArgs} args - Arguments to find a DeviceAC
     * @example
     * // Get one DeviceAC
     * const deviceAC = await prisma.deviceAC.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends deviceACFindUniqueArgs>(args: SelectSubset<T, deviceACFindUniqueArgs<ExtArgs>>): Prisma__deviceACClient<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DeviceAC that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {deviceACFindUniqueOrThrowArgs} args - Arguments to find a DeviceAC
     * @example
     * // Get one DeviceAC
     * const deviceAC = await prisma.deviceAC.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends deviceACFindUniqueOrThrowArgs>(args: SelectSubset<T, deviceACFindUniqueOrThrowArgs<ExtArgs>>): Prisma__deviceACClient<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DeviceAC that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceACFindFirstArgs} args - Arguments to find a DeviceAC
     * @example
     * // Get one DeviceAC
     * const deviceAC = await prisma.deviceAC.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends deviceACFindFirstArgs>(args?: SelectSubset<T, deviceACFindFirstArgs<ExtArgs>>): Prisma__deviceACClient<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DeviceAC that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceACFindFirstOrThrowArgs} args - Arguments to find a DeviceAC
     * @example
     * // Get one DeviceAC
     * const deviceAC = await prisma.deviceAC.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends deviceACFindFirstOrThrowArgs>(args?: SelectSubset<T, deviceACFindFirstOrThrowArgs<ExtArgs>>): Prisma__deviceACClient<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DeviceACS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceACFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceACS
     * const deviceACS = await prisma.deviceAC.findMany()
     * 
     * // Get first 10 DeviceACS
     * const deviceACS = await prisma.deviceAC.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceACWithIdOnly = await prisma.deviceAC.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends deviceACFindManyArgs>(args?: SelectSubset<T, deviceACFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DeviceAC.
     * @param {deviceACCreateArgs} args - Arguments to create a DeviceAC.
     * @example
     * // Create one DeviceAC
     * const DeviceAC = await prisma.deviceAC.create({
     *   data: {
     *     // ... data to create a DeviceAC
     *   }
     * })
     * 
     */
    create<T extends deviceACCreateArgs>(args: SelectSubset<T, deviceACCreateArgs<ExtArgs>>): Prisma__deviceACClient<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DeviceACS.
     * @param {deviceACCreateManyArgs} args - Arguments to create many DeviceACS.
     * @example
     * // Create many DeviceACS
     * const deviceAC = await prisma.deviceAC.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends deviceACCreateManyArgs>(args?: SelectSubset<T, deviceACCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeviceACS and returns the data saved in the database.
     * @param {deviceACCreateManyAndReturnArgs} args - Arguments to create many DeviceACS.
     * @example
     * // Create many DeviceACS
     * const deviceAC = await prisma.deviceAC.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeviceACS and only return the `id`
     * const deviceACWithIdOnly = await prisma.deviceAC.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends deviceACCreateManyAndReturnArgs>(args?: SelectSubset<T, deviceACCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DeviceAC.
     * @param {deviceACDeleteArgs} args - Arguments to delete one DeviceAC.
     * @example
     * // Delete one DeviceAC
     * const DeviceAC = await prisma.deviceAC.delete({
     *   where: {
     *     // ... filter to delete one DeviceAC
     *   }
     * })
     * 
     */
    delete<T extends deviceACDeleteArgs>(args: SelectSubset<T, deviceACDeleteArgs<ExtArgs>>): Prisma__deviceACClient<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DeviceAC.
     * @param {deviceACUpdateArgs} args - Arguments to update one DeviceAC.
     * @example
     * // Update one DeviceAC
     * const deviceAC = await prisma.deviceAC.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends deviceACUpdateArgs>(args: SelectSubset<T, deviceACUpdateArgs<ExtArgs>>): Prisma__deviceACClient<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DeviceACS.
     * @param {deviceACDeleteManyArgs} args - Arguments to filter DeviceACS to delete.
     * @example
     * // Delete a few DeviceACS
     * const { count } = await prisma.deviceAC.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends deviceACDeleteManyArgs>(args?: SelectSubset<T, deviceACDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceACUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceACS
     * const deviceAC = await prisma.deviceAC.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends deviceACUpdateManyArgs>(args: SelectSubset<T, deviceACUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DeviceAC.
     * @param {deviceACUpsertArgs} args - Arguments to update or create a DeviceAC.
     * @example
     * // Update or create a DeviceAC
     * const deviceAC = await prisma.deviceAC.upsert({
     *   create: {
     *     // ... data to create a DeviceAC
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceAC we want to update
     *   }
     * })
     */
    upsert<T extends deviceACUpsertArgs>(args: SelectSubset<T, deviceACUpsertArgs<ExtArgs>>): Prisma__deviceACClient<$Result.GetResult<Prisma.$deviceACPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DeviceACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceACCountArgs} args - Arguments to filter DeviceACS to count.
     * @example
     * // Count the number of DeviceACS
     * const count = await prisma.deviceAC.count({
     *   where: {
     *     // ... the filter for the DeviceACS we want to count
     *   }
     * })
    **/
    count<T extends deviceACCountArgs>(
      args?: Subset<T, deviceACCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceACCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceACAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceACAggregateArgs>(args: Subset<T, DeviceACAggregateArgs>): Prisma.PrismaPromise<GetDeviceACAggregateType<T>>

    /**
     * Group by DeviceAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceACGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends deviceACGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: deviceACGroupByArgs['orderBy'] }
        : { orderBy?: deviceACGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, deviceACGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceACGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the deviceAC model
   */
  readonly fields: deviceACFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for deviceAC.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__deviceACClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the deviceAC model
   */ 
  interface deviceACFieldRefs {
    readonly id: FieldRef<"deviceAC", 'Int'>
    readonly timestamp: FieldRef<"deviceAC", 'DateTime'>
    readonly SSID: FieldRef<"deviceAC", 'String'>
    readonly PASSWORD: FieldRef<"deviceAC", 'String'>
    readonly IP: FieldRef<"deviceAC", 'String'>
    readonly updatedAt: FieldRef<"deviceAC", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * deviceAC findUnique
   */
  export type deviceACFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
    /**
     * Filter, which deviceAC to fetch.
     */
    where: deviceACWhereUniqueInput
  }

  /**
   * deviceAC findUniqueOrThrow
   */
  export type deviceACFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
    /**
     * Filter, which deviceAC to fetch.
     */
    where: deviceACWhereUniqueInput
  }

  /**
   * deviceAC findFirst
   */
  export type deviceACFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
    /**
     * Filter, which deviceAC to fetch.
     */
    where?: deviceACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deviceACS to fetch.
     */
    orderBy?: deviceACOrderByWithRelationInput | deviceACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deviceACS.
     */
    cursor?: deviceACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deviceACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deviceACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deviceACS.
     */
    distinct?: DeviceACScalarFieldEnum | DeviceACScalarFieldEnum[]
  }

  /**
   * deviceAC findFirstOrThrow
   */
  export type deviceACFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
    /**
     * Filter, which deviceAC to fetch.
     */
    where?: deviceACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deviceACS to fetch.
     */
    orderBy?: deviceACOrderByWithRelationInput | deviceACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deviceACS.
     */
    cursor?: deviceACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deviceACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deviceACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deviceACS.
     */
    distinct?: DeviceACScalarFieldEnum | DeviceACScalarFieldEnum[]
  }

  /**
   * deviceAC findMany
   */
  export type deviceACFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
    /**
     * Filter, which deviceACS to fetch.
     */
    where?: deviceACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deviceACS to fetch.
     */
    orderBy?: deviceACOrderByWithRelationInput | deviceACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deviceACS.
     */
    cursor?: deviceACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deviceACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deviceACS.
     */
    skip?: number
    distinct?: DeviceACScalarFieldEnum | DeviceACScalarFieldEnum[]
  }

  /**
   * deviceAC create
   */
  export type deviceACCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
    /**
     * The data needed to create a deviceAC.
     */
    data: XOR<deviceACCreateInput, deviceACUncheckedCreateInput>
  }

  /**
   * deviceAC createMany
   */
  export type deviceACCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many deviceACS.
     */
    data: deviceACCreateManyInput | deviceACCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * deviceAC createManyAndReturn
   */
  export type deviceACCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many deviceACS.
     */
    data: deviceACCreateManyInput | deviceACCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * deviceAC update
   */
  export type deviceACUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
    /**
     * The data needed to update a deviceAC.
     */
    data: XOR<deviceACUpdateInput, deviceACUncheckedUpdateInput>
    /**
     * Choose, which deviceAC to update.
     */
    where: deviceACWhereUniqueInput
  }

  /**
   * deviceAC updateMany
   */
  export type deviceACUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update deviceACS.
     */
    data: XOR<deviceACUpdateManyMutationInput, deviceACUncheckedUpdateManyInput>
    /**
     * Filter which deviceACS to update
     */
    where?: deviceACWhereInput
  }

  /**
   * deviceAC upsert
   */
  export type deviceACUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
    /**
     * The filter to search for the deviceAC to update in case it exists.
     */
    where: deviceACWhereUniqueInput
    /**
     * In case the deviceAC found by the `where` argument doesn't exist, create a new deviceAC with this data.
     */
    create: XOR<deviceACCreateInput, deviceACUncheckedCreateInput>
    /**
     * In case the deviceAC was found with the provided `where` argument, update it with this data.
     */
    update: XOR<deviceACUpdateInput, deviceACUncheckedUpdateInput>
  }

  /**
   * deviceAC delete
   */
  export type deviceACDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
    /**
     * Filter which deviceAC to delete.
     */
    where: deviceACWhereUniqueInput
  }

  /**
   * deviceAC deleteMany
   */
  export type deviceACDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deviceACS to delete
     */
    where?: deviceACWhereInput
  }

  /**
   * deviceAC without action
   */
  export type deviceACDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deviceAC
     */
    select?: deviceACSelect<ExtArgs> | null
  }


  /**
   * Model LogsAC
   */

  export type AggregateLogsAC = {
    _count: LogsACCountAggregateOutputType | null
    _avg: LogsACAvgAggregateOutputType | null
    _sum: LogsACSumAggregateOutputType | null
    _min: LogsACMinAggregateOutputType | null
    _max: LogsACMaxAggregateOutputType | null
  }

  export type LogsACAvgAggregateOutputType = {
    id: number | null
    voltage: number | null
    current: number | null
    power: number | null
    watthours: number | null
    energy: number | null
    frequency: number | null
    PF: number | null
    temp: number | null
    hum: number | null
  }

  export type LogsACSumAggregateOutputType = {
    id: number | null
    voltage: number | null
    current: number | null
    power: number | null
    watthours: number | null
    energy: number | null
    frequency: number | null
    PF: number | null
    temp: number | null
    hum: number | null
  }

  export type LogsACMinAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    voltage: number | null
    current: number | null
    power: number | null
    watthours: number | null
    energy: number | null
    frequency: number | null
    PF: number | null
    temp: number | null
    hum: number | null
    door: boolean | null
    updatedAt: Date | null
  }

  export type LogsACMaxAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    voltage: number | null
    current: number | null
    power: number | null
    watthours: number | null
    energy: number | null
    frequency: number | null
    PF: number | null
    temp: number | null
    hum: number | null
    door: boolean | null
    updatedAt: Date | null
  }

  export type LogsACCountAggregateOutputType = {
    id: number
    timestamp: number
    voltage: number
    current: number
    power: number
    watthours: number
    energy: number
    frequency: number
    PF: number
    temp: number
    hum: number
    door: number
    updatedAt: number
    _all: number
  }


  export type LogsACAvgAggregateInputType = {
    id?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
  }

  export type LogsACSumAggregateInputType = {
    id?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
  }

  export type LogsACMinAggregateInputType = {
    id?: true
    timestamp?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
    door?: true
    updatedAt?: true
  }

  export type LogsACMaxAggregateInputType = {
    id?: true
    timestamp?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
    door?: true
    updatedAt?: true
  }

  export type LogsACCountAggregateInputType = {
    id?: true
    timestamp?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
    door?: true
    updatedAt?: true
    _all?: true
  }

  export type LogsACAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogsAC to aggregate.
     */
    where?: LogsACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogsACS to fetch.
     */
    orderBy?: LogsACOrderByWithRelationInput | LogsACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogsACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogsACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogsACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LogsACS
    **/
    _count?: true | LogsACCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogsACAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogsACSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogsACMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogsACMaxAggregateInputType
  }

  export type GetLogsACAggregateType<T extends LogsACAggregateArgs> = {
        [P in keyof T & keyof AggregateLogsAC]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogsAC[P]>
      : GetScalarType<T[P], AggregateLogsAC[P]>
  }




  export type LogsACGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogsACWhereInput
    orderBy?: LogsACOrderByWithAggregationInput | LogsACOrderByWithAggregationInput[]
    by: LogsACScalarFieldEnum[] | LogsACScalarFieldEnum
    having?: LogsACScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogsACCountAggregateInputType | true
    _avg?: LogsACAvgAggregateInputType
    _sum?: LogsACSumAggregateInputType
    _min?: LogsACMinAggregateInputType
    _max?: LogsACMaxAggregateInputType
  }

  export type LogsACGroupByOutputType = {
    id: number
    timestamp: Date
    voltage: number
    current: number
    power: number
    watthours: number
    energy: number
    frequency: number
    PF: number
    temp: number
    hum: number
    door: boolean
    updatedAt: Date
    _count: LogsACCountAggregateOutputType | null
    _avg: LogsACAvgAggregateOutputType | null
    _sum: LogsACSumAggregateOutputType | null
    _min: LogsACMinAggregateOutputType | null
    _max: LogsACMaxAggregateOutputType | null
  }

  type GetLogsACGroupByPayload<T extends LogsACGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogsACGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogsACGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogsACGroupByOutputType[P]>
            : GetScalarType<T[P], LogsACGroupByOutputType[P]>
        }
      >
    >


  export type LogsACSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    voltage?: boolean
    current?: boolean
    power?: boolean
    watthours?: boolean
    energy?: boolean
    frequency?: boolean
    PF?: boolean
    temp?: boolean
    hum?: boolean
    door?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["logsAC"]>

  export type LogsACSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    voltage?: boolean
    current?: boolean
    power?: boolean
    watthours?: boolean
    energy?: boolean
    frequency?: boolean
    PF?: boolean
    temp?: boolean
    hum?: boolean
    door?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["logsAC"]>

  export type LogsACSelectScalar = {
    id?: boolean
    timestamp?: boolean
    voltage?: boolean
    current?: boolean
    power?: boolean
    watthours?: boolean
    energy?: boolean
    frequency?: boolean
    PF?: boolean
    temp?: boolean
    hum?: boolean
    door?: boolean
    updatedAt?: boolean
  }


  export type $LogsACPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LogsAC"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      timestamp: Date
      voltage: number
      current: number
      power: number
      watthours: number
      energy: number
      frequency: number
      PF: number
      temp: number
      hum: number
      door: boolean
      updatedAt: Date
    }, ExtArgs["result"]["logsAC"]>
    composites: {}
  }

  type LogsACGetPayload<S extends boolean | null | undefined | LogsACDefaultArgs> = $Result.GetResult<Prisma.$LogsACPayload, S>

  type LogsACCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LogsACFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LogsACCountAggregateInputType | true
    }

  export interface LogsACDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LogsAC'], meta: { name: 'LogsAC' } }
    /**
     * Find zero or one LogsAC that matches the filter.
     * @param {LogsACFindUniqueArgs} args - Arguments to find a LogsAC
     * @example
     * // Get one LogsAC
     * const logsAC = await prisma.logsAC.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogsACFindUniqueArgs>(args: SelectSubset<T, LogsACFindUniqueArgs<ExtArgs>>): Prisma__LogsACClient<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LogsAC that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LogsACFindUniqueOrThrowArgs} args - Arguments to find a LogsAC
     * @example
     * // Get one LogsAC
     * const logsAC = await prisma.logsAC.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogsACFindUniqueOrThrowArgs>(args: SelectSubset<T, LogsACFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogsACClient<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LogsAC that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsACFindFirstArgs} args - Arguments to find a LogsAC
     * @example
     * // Get one LogsAC
     * const logsAC = await prisma.logsAC.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogsACFindFirstArgs>(args?: SelectSubset<T, LogsACFindFirstArgs<ExtArgs>>): Prisma__LogsACClient<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LogsAC that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsACFindFirstOrThrowArgs} args - Arguments to find a LogsAC
     * @example
     * // Get one LogsAC
     * const logsAC = await prisma.logsAC.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogsACFindFirstOrThrowArgs>(args?: SelectSubset<T, LogsACFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogsACClient<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LogsACS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsACFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LogsACS
     * const logsACS = await prisma.logsAC.findMany()
     * 
     * // Get first 10 LogsACS
     * const logsACS = await prisma.logsAC.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logsACWithIdOnly = await prisma.logsAC.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogsACFindManyArgs>(args?: SelectSubset<T, LogsACFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LogsAC.
     * @param {LogsACCreateArgs} args - Arguments to create a LogsAC.
     * @example
     * // Create one LogsAC
     * const LogsAC = await prisma.logsAC.create({
     *   data: {
     *     // ... data to create a LogsAC
     *   }
     * })
     * 
     */
    create<T extends LogsACCreateArgs>(args: SelectSubset<T, LogsACCreateArgs<ExtArgs>>): Prisma__LogsACClient<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LogsACS.
     * @param {LogsACCreateManyArgs} args - Arguments to create many LogsACS.
     * @example
     * // Create many LogsACS
     * const logsAC = await prisma.logsAC.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogsACCreateManyArgs>(args?: SelectSubset<T, LogsACCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LogsACS and returns the data saved in the database.
     * @param {LogsACCreateManyAndReturnArgs} args - Arguments to create many LogsACS.
     * @example
     * // Create many LogsACS
     * const logsAC = await prisma.logsAC.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LogsACS and only return the `id`
     * const logsACWithIdOnly = await prisma.logsAC.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogsACCreateManyAndReturnArgs>(args?: SelectSubset<T, LogsACCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LogsAC.
     * @param {LogsACDeleteArgs} args - Arguments to delete one LogsAC.
     * @example
     * // Delete one LogsAC
     * const LogsAC = await prisma.logsAC.delete({
     *   where: {
     *     // ... filter to delete one LogsAC
     *   }
     * })
     * 
     */
    delete<T extends LogsACDeleteArgs>(args: SelectSubset<T, LogsACDeleteArgs<ExtArgs>>): Prisma__LogsACClient<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LogsAC.
     * @param {LogsACUpdateArgs} args - Arguments to update one LogsAC.
     * @example
     * // Update one LogsAC
     * const logsAC = await prisma.logsAC.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogsACUpdateArgs>(args: SelectSubset<T, LogsACUpdateArgs<ExtArgs>>): Prisma__LogsACClient<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LogsACS.
     * @param {LogsACDeleteManyArgs} args - Arguments to filter LogsACS to delete.
     * @example
     * // Delete a few LogsACS
     * const { count } = await prisma.logsAC.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogsACDeleteManyArgs>(args?: SelectSubset<T, LogsACDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogsACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsACUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LogsACS
     * const logsAC = await prisma.logsAC.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogsACUpdateManyArgs>(args: SelectSubset<T, LogsACUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LogsAC.
     * @param {LogsACUpsertArgs} args - Arguments to update or create a LogsAC.
     * @example
     * // Update or create a LogsAC
     * const logsAC = await prisma.logsAC.upsert({
     *   create: {
     *     // ... data to create a LogsAC
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LogsAC we want to update
     *   }
     * })
     */
    upsert<T extends LogsACUpsertArgs>(args: SelectSubset<T, LogsACUpsertArgs<ExtArgs>>): Prisma__LogsACClient<$Result.GetResult<Prisma.$LogsACPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LogsACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsACCountArgs} args - Arguments to filter LogsACS to count.
     * @example
     * // Count the number of LogsACS
     * const count = await prisma.logsAC.count({
     *   where: {
     *     // ... the filter for the LogsACS we want to count
     *   }
     * })
    **/
    count<T extends LogsACCountArgs>(
      args?: Subset<T, LogsACCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogsACCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LogsAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsACAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogsACAggregateArgs>(args: Subset<T, LogsACAggregateArgs>): Prisma.PrismaPromise<GetLogsACAggregateType<T>>

    /**
     * Group by LogsAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsACGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogsACGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogsACGroupByArgs['orderBy'] }
        : { orderBy?: LogsACGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogsACGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogsACGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LogsAC model
   */
  readonly fields: LogsACFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LogsAC.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogsACClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LogsAC model
   */ 
  interface LogsACFieldRefs {
    readonly id: FieldRef<"LogsAC", 'Int'>
    readonly timestamp: FieldRef<"LogsAC", 'DateTime'>
    readonly voltage: FieldRef<"LogsAC", 'Float'>
    readonly current: FieldRef<"LogsAC", 'Float'>
    readonly power: FieldRef<"LogsAC", 'Float'>
    readonly watthours: FieldRef<"LogsAC", 'Float'>
    readonly energy: FieldRef<"LogsAC", 'Float'>
    readonly frequency: FieldRef<"LogsAC", 'Float'>
    readonly PF: FieldRef<"LogsAC", 'Float'>
    readonly temp: FieldRef<"LogsAC", 'Float'>
    readonly hum: FieldRef<"LogsAC", 'Float'>
    readonly door: FieldRef<"LogsAC", 'Boolean'>
    readonly updatedAt: FieldRef<"LogsAC", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LogsAC findUnique
   */
  export type LogsACFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
    /**
     * Filter, which LogsAC to fetch.
     */
    where: LogsACWhereUniqueInput
  }

  /**
   * LogsAC findUniqueOrThrow
   */
  export type LogsACFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
    /**
     * Filter, which LogsAC to fetch.
     */
    where: LogsACWhereUniqueInput
  }

  /**
   * LogsAC findFirst
   */
  export type LogsACFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
    /**
     * Filter, which LogsAC to fetch.
     */
    where?: LogsACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogsACS to fetch.
     */
    orderBy?: LogsACOrderByWithRelationInput | LogsACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogsACS.
     */
    cursor?: LogsACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogsACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogsACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogsACS.
     */
    distinct?: LogsACScalarFieldEnum | LogsACScalarFieldEnum[]
  }

  /**
   * LogsAC findFirstOrThrow
   */
  export type LogsACFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
    /**
     * Filter, which LogsAC to fetch.
     */
    where?: LogsACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogsACS to fetch.
     */
    orderBy?: LogsACOrderByWithRelationInput | LogsACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogsACS.
     */
    cursor?: LogsACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogsACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogsACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogsACS.
     */
    distinct?: LogsACScalarFieldEnum | LogsACScalarFieldEnum[]
  }

  /**
   * LogsAC findMany
   */
  export type LogsACFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
    /**
     * Filter, which LogsACS to fetch.
     */
    where?: LogsACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogsACS to fetch.
     */
    orderBy?: LogsACOrderByWithRelationInput | LogsACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LogsACS.
     */
    cursor?: LogsACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogsACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogsACS.
     */
    skip?: number
    distinct?: LogsACScalarFieldEnum | LogsACScalarFieldEnum[]
  }

  /**
   * LogsAC create
   */
  export type LogsACCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
    /**
     * The data needed to create a LogsAC.
     */
    data: XOR<LogsACCreateInput, LogsACUncheckedCreateInput>
  }

  /**
   * LogsAC createMany
   */
  export type LogsACCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LogsACS.
     */
    data: LogsACCreateManyInput | LogsACCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LogsAC createManyAndReturn
   */
  export type LogsACCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LogsACS.
     */
    data: LogsACCreateManyInput | LogsACCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LogsAC update
   */
  export type LogsACUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
    /**
     * The data needed to update a LogsAC.
     */
    data: XOR<LogsACUpdateInput, LogsACUncheckedUpdateInput>
    /**
     * Choose, which LogsAC to update.
     */
    where: LogsACWhereUniqueInput
  }

  /**
   * LogsAC updateMany
   */
  export type LogsACUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LogsACS.
     */
    data: XOR<LogsACUpdateManyMutationInput, LogsACUncheckedUpdateManyInput>
    /**
     * Filter which LogsACS to update
     */
    where?: LogsACWhereInput
  }

  /**
   * LogsAC upsert
   */
  export type LogsACUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
    /**
     * The filter to search for the LogsAC to update in case it exists.
     */
    where: LogsACWhereUniqueInput
    /**
     * In case the LogsAC found by the `where` argument doesn't exist, create a new LogsAC with this data.
     */
    create: XOR<LogsACCreateInput, LogsACUncheckedCreateInput>
    /**
     * In case the LogsAC was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogsACUpdateInput, LogsACUncheckedUpdateInput>
  }

  /**
   * LogsAC delete
   */
  export type LogsACDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
    /**
     * Filter which LogsAC to delete.
     */
    where: LogsACWhereUniqueInput
  }

  /**
   * LogsAC deleteMany
   */
  export type LogsACDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogsACS to delete
     */
    where?: LogsACWhereInput
  }

  /**
   * LogsAC without action
   */
  export type LogsACDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogsAC
     */
    select?: LogsACSelect<ExtArgs> | null
  }


  /**
   * Model SensorAC
   */

  export type AggregateSensorAC = {
    _count: SensorACCountAggregateOutputType | null
    _avg: SensorACAvgAggregateOutputType | null
    _sum: SensorACSumAggregateOutputType | null
    _min: SensorACMinAggregateOutputType | null
    _max: SensorACMaxAggregateOutputType | null
  }

  export type SensorACAvgAggregateOutputType = {
    id: number | null
    voltage: number | null
    current: number | null
    power: number | null
    watthours: number | null
    energy: number | null
    frequency: number | null
    PF: number | null
    temp: number | null
    hum: number | null
  }

  export type SensorACSumAggregateOutputType = {
    id: number | null
    voltage: number | null
    current: number | null
    power: number | null
    watthours: number | null
    energy: number | null
    frequency: number | null
    PF: number | null
    temp: number | null
    hum: number | null
  }

  export type SensorACMinAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    voltage: number | null
    current: number | null
    power: number | null
    watthours: number | null
    energy: number | null
    frequency: number | null
    PF: number | null
    temp: number | null
    hum: number | null
    door: boolean | null
    updatedAt: Date | null
  }

  export type SensorACMaxAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    voltage: number | null
    current: number | null
    power: number | null
    watthours: number | null
    energy: number | null
    frequency: number | null
    PF: number | null
    temp: number | null
    hum: number | null
    door: boolean | null
    updatedAt: Date | null
  }

  export type SensorACCountAggregateOutputType = {
    id: number
    timestamp: number
    voltage: number
    current: number
    power: number
    watthours: number
    energy: number
    frequency: number
    PF: number
    temp: number
    hum: number
    door: number
    updatedAt: number
    _all: number
  }


  export type SensorACAvgAggregateInputType = {
    id?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
  }

  export type SensorACSumAggregateInputType = {
    id?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
  }

  export type SensorACMinAggregateInputType = {
    id?: true
    timestamp?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
    door?: true
    updatedAt?: true
  }

  export type SensorACMaxAggregateInputType = {
    id?: true
    timestamp?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
    door?: true
    updatedAt?: true
  }

  export type SensorACCountAggregateInputType = {
    id?: true
    timestamp?: true
    voltage?: true
    current?: true
    power?: true
    watthours?: true
    energy?: true
    frequency?: true
    PF?: true
    temp?: true
    hum?: true
    door?: true
    updatedAt?: true
    _all?: true
  }

  export type SensorACAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SensorAC to aggregate.
     */
    where?: SensorACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SensorACS to fetch.
     */
    orderBy?: SensorACOrderByWithRelationInput | SensorACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SensorACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SensorACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SensorACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SensorACS
    **/
    _count?: true | SensorACCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SensorACAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SensorACSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SensorACMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SensorACMaxAggregateInputType
  }

  export type GetSensorACAggregateType<T extends SensorACAggregateArgs> = {
        [P in keyof T & keyof AggregateSensorAC]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSensorAC[P]>
      : GetScalarType<T[P], AggregateSensorAC[P]>
  }




  export type SensorACGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SensorACWhereInput
    orderBy?: SensorACOrderByWithAggregationInput | SensorACOrderByWithAggregationInput[]
    by: SensorACScalarFieldEnum[] | SensorACScalarFieldEnum
    having?: SensorACScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SensorACCountAggregateInputType | true
    _avg?: SensorACAvgAggregateInputType
    _sum?: SensorACSumAggregateInputType
    _min?: SensorACMinAggregateInputType
    _max?: SensorACMaxAggregateInputType
  }

  export type SensorACGroupByOutputType = {
    id: number
    timestamp: Date
    voltage: number
    current: number
    power: number
    watthours: number
    energy: number
    frequency: number
    PF: number
    temp: number
    hum: number
    door: boolean
    updatedAt: Date
    _count: SensorACCountAggregateOutputType | null
    _avg: SensorACAvgAggregateOutputType | null
    _sum: SensorACSumAggregateOutputType | null
    _min: SensorACMinAggregateOutputType | null
    _max: SensorACMaxAggregateOutputType | null
  }

  type GetSensorACGroupByPayload<T extends SensorACGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SensorACGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SensorACGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SensorACGroupByOutputType[P]>
            : GetScalarType<T[P], SensorACGroupByOutputType[P]>
        }
      >
    >


  export type SensorACSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    voltage?: boolean
    current?: boolean
    power?: boolean
    watthours?: boolean
    energy?: boolean
    frequency?: boolean
    PF?: boolean
    temp?: boolean
    hum?: boolean
    door?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sensorAC"]>

  export type SensorACSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    voltage?: boolean
    current?: boolean
    power?: boolean
    watthours?: boolean
    energy?: boolean
    frequency?: boolean
    PF?: boolean
    temp?: boolean
    hum?: boolean
    door?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sensorAC"]>

  export type SensorACSelectScalar = {
    id?: boolean
    timestamp?: boolean
    voltage?: boolean
    current?: boolean
    power?: boolean
    watthours?: boolean
    energy?: boolean
    frequency?: boolean
    PF?: boolean
    temp?: boolean
    hum?: boolean
    door?: boolean
    updatedAt?: boolean
  }


  export type $SensorACPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SensorAC"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      timestamp: Date
      voltage: number
      current: number
      power: number
      watthours: number
      energy: number
      frequency: number
      PF: number
      temp: number
      hum: number
      door: boolean
      updatedAt: Date
    }, ExtArgs["result"]["sensorAC"]>
    composites: {}
  }

  type SensorACGetPayload<S extends boolean | null | undefined | SensorACDefaultArgs> = $Result.GetResult<Prisma.$SensorACPayload, S>

  type SensorACCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SensorACFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SensorACCountAggregateInputType | true
    }

  export interface SensorACDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SensorAC'], meta: { name: 'SensorAC' } }
    /**
     * Find zero or one SensorAC that matches the filter.
     * @param {SensorACFindUniqueArgs} args - Arguments to find a SensorAC
     * @example
     * // Get one SensorAC
     * const sensorAC = await prisma.sensorAC.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SensorACFindUniqueArgs>(args: SelectSubset<T, SensorACFindUniqueArgs<ExtArgs>>): Prisma__SensorACClient<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SensorAC that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SensorACFindUniqueOrThrowArgs} args - Arguments to find a SensorAC
     * @example
     * // Get one SensorAC
     * const sensorAC = await prisma.sensorAC.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SensorACFindUniqueOrThrowArgs>(args: SelectSubset<T, SensorACFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SensorACClient<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SensorAC that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorACFindFirstArgs} args - Arguments to find a SensorAC
     * @example
     * // Get one SensorAC
     * const sensorAC = await prisma.sensorAC.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SensorACFindFirstArgs>(args?: SelectSubset<T, SensorACFindFirstArgs<ExtArgs>>): Prisma__SensorACClient<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SensorAC that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorACFindFirstOrThrowArgs} args - Arguments to find a SensorAC
     * @example
     * // Get one SensorAC
     * const sensorAC = await prisma.sensorAC.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SensorACFindFirstOrThrowArgs>(args?: SelectSubset<T, SensorACFindFirstOrThrowArgs<ExtArgs>>): Prisma__SensorACClient<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SensorACS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorACFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SensorACS
     * const sensorACS = await prisma.sensorAC.findMany()
     * 
     * // Get first 10 SensorACS
     * const sensorACS = await prisma.sensorAC.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sensorACWithIdOnly = await prisma.sensorAC.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SensorACFindManyArgs>(args?: SelectSubset<T, SensorACFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SensorAC.
     * @param {SensorACCreateArgs} args - Arguments to create a SensorAC.
     * @example
     * // Create one SensorAC
     * const SensorAC = await prisma.sensorAC.create({
     *   data: {
     *     // ... data to create a SensorAC
     *   }
     * })
     * 
     */
    create<T extends SensorACCreateArgs>(args: SelectSubset<T, SensorACCreateArgs<ExtArgs>>): Prisma__SensorACClient<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SensorACS.
     * @param {SensorACCreateManyArgs} args - Arguments to create many SensorACS.
     * @example
     * // Create many SensorACS
     * const sensorAC = await prisma.sensorAC.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SensorACCreateManyArgs>(args?: SelectSubset<T, SensorACCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SensorACS and returns the data saved in the database.
     * @param {SensorACCreateManyAndReturnArgs} args - Arguments to create many SensorACS.
     * @example
     * // Create many SensorACS
     * const sensorAC = await prisma.sensorAC.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SensorACS and only return the `id`
     * const sensorACWithIdOnly = await prisma.sensorAC.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SensorACCreateManyAndReturnArgs>(args?: SelectSubset<T, SensorACCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SensorAC.
     * @param {SensorACDeleteArgs} args - Arguments to delete one SensorAC.
     * @example
     * // Delete one SensorAC
     * const SensorAC = await prisma.sensorAC.delete({
     *   where: {
     *     // ... filter to delete one SensorAC
     *   }
     * })
     * 
     */
    delete<T extends SensorACDeleteArgs>(args: SelectSubset<T, SensorACDeleteArgs<ExtArgs>>): Prisma__SensorACClient<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SensorAC.
     * @param {SensorACUpdateArgs} args - Arguments to update one SensorAC.
     * @example
     * // Update one SensorAC
     * const sensorAC = await prisma.sensorAC.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SensorACUpdateArgs>(args: SelectSubset<T, SensorACUpdateArgs<ExtArgs>>): Prisma__SensorACClient<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SensorACS.
     * @param {SensorACDeleteManyArgs} args - Arguments to filter SensorACS to delete.
     * @example
     * // Delete a few SensorACS
     * const { count } = await prisma.sensorAC.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SensorACDeleteManyArgs>(args?: SelectSubset<T, SensorACDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SensorACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorACUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SensorACS
     * const sensorAC = await prisma.sensorAC.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SensorACUpdateManyArgs>(args: SelectSubset<T, SensorACUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SensorAC.
     * @param {SensorACUpsertArgs} args - Arguments to update or create a SensorAC.
     * @example
     * // Update or create a SensorAC
     * const sensorAC = await prisma.sensorAC.upsert({
     *   create: {
     *     // ... data to create a SensorAC
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SensorAC we want to update
     *   }
     * })
     */
    upsert<T extends SensorACUpsertArgs>(args: SelectSubset<T, SensorACUpsertArgs<ExtArgs>>): Prisma__SensorACClient<$Result.GetResult<Prisma.$SensorACPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SensorACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorACCountArgs} args - Arguments to filter SensorACS to count.
     * @example
     * // Count the number of SensorACS
     * const count = await prisma.sensorAC.count({
     *   where: {
     *     // ... the filter for the SensorACS we want to count
     *   }
     * })
    **/
    count<T extends SensorACCountArgs>(
      args?: Subset<T, SensorACCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SensorACCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SensorAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorACAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SensorACAggregateArgs>(args: Subset<T, SensorACAggregateArgs>): Prisma.PrismaPromise<GetSensorACAggregateType<T>>

    /**
     * Group by SensorAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorACGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SensorACGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SensorACGroupByArgs['orderBy'] }
        : { orderBy?: SensorACGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SensorACGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSensorACGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SensorAC model
   */
  readonly fields: SensorACFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SensorAC.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SensorACClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SensorAC model
   */ 
  interface SensorACFieldRefs {
    readonly id: FieldRef<"SensorAC", 'Int'>
    readonly timestamp: FieldRef<"SensorAC", 'DateTime'>
    readonly voltage: FieldRef<"SensorAC", 'Float'>
    readonly current: FieldRef<"SensorAC", 'Float'>
    readonly power: FieldRef<"SensorAC", 'Float'>
    readonly watthours: FieldRef<"SensorAC", 'Float'>
    readonly energy: FieldRef<"SensorAC", 'Float'>
    readonly frequency: FieldRef<"SensorAC", 'Float'>
    readonly PF: FieldRef<"SensorAC", 'Float'>
    readonly temp: FieldRef<"SensorAC", 'Float'>
    readonly hum: FieldRef<"SensorAC", 'Float'>
    readonly door: FieldRef<"SensorAC", 'Boolean'>
    readonly updatedAt: FieldRef<"SensorAC", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SensorAC findUnique
   */
  export type SensorACFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
    /**
     * Filter, which SensorAC to fetch.
     */
    where: SensorACWhereUniqueInput
  }

  /**
   * SensorAC findUniqueOrThrow
   */
  export type SensorACFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
    /**
     * Filter, which SensorAC to fetch.
     */
    where: SensorACWhereUniqueInput
  }

  /**
   * SensorAC findFirst
   */
  export type SensorACFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
    /**
     * Filter, which SensorAC to fetch.
     */
    where?: SensorACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SensorACS to fetch.
     */
    orderBy?: SensorACOrderByWithRelationInput | SensorACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SensorACS.
     */
    cursor?: SensorACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SensorACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SensorACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SensorACS.
     */
    distinct?: SensorACScalarFieldEnum | SensorACScalarFieldEnum[]
  }

  /**
   * SensorAC findFirstOrThrow
   */
  export type SensorACFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
    /**
     * Filter, which SensorAC to fetch.
     */
    where?: SensorACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SensorACS to fetch.
     */
    orderBy?: SensorACOrderByWithRelationInput | SensorACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SensorACS.
     */
    cursor?: SensorACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SensorACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SensorACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SensorACS.
     */
    distinct?: SensorACScalarFieldEnum | SensorACScalarFieldEnum[]
  }

  /**
   * SensorAC findMany
   */
  export type SensorACFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
    /**
     * Filter, which SensorACS to fetch.
     */
    where?: SensorACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SensorACS to fetch.
     */
    orderBy?: SensorACOrderByWithRelationInput | SensorACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SensorACS.
     */
    cursor?: SensorACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SensorACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SensorACS.
     */
    skip?: number
    distinct?: SensorACScalarFieldEnum | SensorACScalarFieldEnum[]
  }

  /**
   * SensorAC create
   */
  export type SensorACCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
    /**
     * The data needed to create a SensorAC.
     */
    data: XOR<SensorACCreateInput, SensorACUncheckedCreateInput>
  }

  /**
   * SensorAC createMany
   */
  export type SensorACCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SensorACS.
     */
    data: SensorACCreateManyInput | SensorACCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SensorAC createManyAndReturn
   */
  export type SensorACCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SensorACS.
     */
    data: SensorACCreateManyInput | SensorACCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SensorAC update
   */
  export type SensorACUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
    /**
     * The data needed to update a SensorAC.
     */
    data: XOR<SensorACUpdateInput, SensorACUncheckedUpdateInput>
    /**
     * Choose, which SensorAC to update.
     */
    where: SensorACWhereUniqueInput
  }

  /**
   * SensorAC updateMany
   */
  export type SensorACUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SensorACS.
     */
    data: XOR<SensorACUpdateManyMutationInput, SensorACUncheckedUpdateManyInput>
    /**
     * Filter which SensorACS to update
     */
    where?: SensorACWhereInput
  }

  /**
   * SensorAC upsert
   */
  export type SensorACUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
    /**
     * The filter to search for the SensorAC to update in case it exists.
     */
    where: SensorACWhereUniqueInput
    /**
     * In case the SensorAC found by the `where` argument doesn't exist, create a new SensorAC with this data.
     */
    create: XOR<SensorACCreateInput, SensorACUncheckedCreateInput>
    /**
     * In case the SensorAC was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SensorACUpdateInput, SensorACUncheckedUpdateInput>
  }

  /**
   * SensorAC delete
   */
  export type SensorACDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
    /**
     * Filter which SensorAC to delete.
     */
    where: SensorACWhereUniqueInput
  }

  /**
   * SensorAC deleteMany
   */
  export type SensorACDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SensorACS to delete
     */
    where?: SensorACWhereInput
  }

  /**
   * SensorAC without action
   */
  export type SensorACDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorAC
     */
    select?: SensorACSelect<ExtArgs> | null
  }


  /**
   * Model OutputAC
   */

  export type AggregateOutputAC = {
    _count: OutputACCountAggregateOutputType | null
    _avg: OutputACAvgAggregateOutputType | null
    _sum: OutputACSumAggregateOutputType | null
    _min: OutputACMinAggregateOutputType | null
    _max: OutputACMaxAggregateOutputType | null
  }

  export type OutputACAvgAggregateOutputType = {
    id: number | null
  }

  export type OutputACSumAggregateOutputType = {
    id: number | null
  }

  export type OutputACMinAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    Auto: boolean | null
    AC: boolean | null
    purifier: boolean | null
    fan: boolean | null
    lamp: boolean | null
    updatedAt: Date | null
  }

  export type OutputACMaxAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    Auto: boolean | null
    AC: boolean | null
    purifier: boolean | null
    fan: boolean | null
    lamp: boolean | null
    updatedAt: Date | null
  }

  export type OutputACCountAggregateOutputType = {
    id: number
    timestamp: number
    Auto: number
    AC: number
    purifier: number
    fan: number
    lamp: number
    updatedAt: number
    _all: number
  }


  export type OutputACAvgAggregateInputType = {
    id?: true
  }

  export type OutputACSumAggregateInputType = {
    id?: true
  }

  export type OutputACMinAggregateInputType = {
    id?: true
    timestamp?: true
    Auto?: true
    AC?: true
    purifier?: true
    fan?: true
    lamp?: true
    updatedAt?: true
  }

  export type OutputACMaxAggregateInputType = {
    id?: true
    timestamp?: true
    Auto?: true
    AC?: true
    purifier?: true
    fan?: true
    lamp?: true
    updatedAt?: true
  }

  export type OutputACCountAggregateInputType = {
    id?: true
    timestamp?: true
    Auto?: true
    AC?: true
    purifier?: true
    fan?: true
    lamp?: true
    updatedAt?: true
    _all?: true
  }

  export type OutputACAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OutputAC to aggregate.
     */
    where?: OutputACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutputACS to fetch.
     */
    orderBy?: OutputACOrderByWithRelationInput | OutputACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OutputACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutputACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutputACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OutputACS
    **/
    _count?: true | OutputACCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OutputACAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OutputACSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OutputACMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OutputACMaxAggregateInputType
  }

  export type GetOutputACAggregateType<T extends OutputACAggregateArgs> = {
        [P in keyof T & keyof AggregateOutputAC]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOutputAC[P]>
      : GetScalarType<T[P], AggregateOutputAC[P]>
  }




  export type OutputACGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutputACWhereInput
    orderBy?: OutputACOrderByWithAggregationInput | OutputACOrderByWithAggregationInput[]
    by: OutputACScalarFieldEnum[] | OutputACScalarFieldEnum
    having?: OutputACScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OutputACCountAggregateInputType | true
    _avg?: OutputACAvgAggregateInputType
    _sum?: OutputACSumAggregateInputType
    _min?: OutputACMinAggregateInputType
    _max?: OutputACMaxAggregateInputType
  }

  export type OutputACGroupByOutputType = {
    id: number
    timestamp: Date
    Auto: boolean
    AC: boolean
    purifier: boolean
    fan: boolean
    lamp: boolean
    updatedAt: Date
    _count: OutputACCountAggregateOutputType | null
    _avg: OutputACAvgAggregateOutputType | null
    _sum: OutputACSumAggregateOutputType | null
    _min: OutputACMinAggregateOutputType | null
    _max: OutputACMaxAggregateOutputType | null
  }

  type GetOutputACGroupByPayload<T extends OutputACGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OutputACGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OutputACGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OutputACGroupByOutputType[P]>
            : GetScalarType<T[P], OutputACGroupByOutputType[P]>
        }
      >
    >


  export type OutputACSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    Auto?: boolean
    AC?: boolean
    purifier?: boolean
    fan?: boolean
    lamp?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["outputAC"]>

  export type OutputACSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    Auto?: boolean
    AC?: boolean
    purifier?: boolean
    fan?: boolean
    lamp?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["outputAC"]>

  export type OutputACSelectScalar = {
    id?: boolean
    timestamp?: boolean
    Auto?: boolean
    AC?: boolean
    purifier?: boolean
    fan?: boolean
    lamp?: boolean
    updatedAt?: boolean
  }


  export type $OutputACPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OutputAC"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      timestamp: Date
      Auto: boolean
      AC: boolean
      purifier: boolean
      fan: boolean
      lamp: boolean
      updatedAt: Date
    }, ExtArgs["result"]["outputAC"]>
    composites: {}
  }

  type OutputACGetPayload<S extends boolean | null | undefined | OutputACDefaultArgs> = $Result.GetResult<Prisma.$OutputACPayload, S>

  type OutputACCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OutputACFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OutputACCountAggregateInputType | true
    }

  export interface OutputACDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OutputAC'], meta: { name: 'OutputAC' } }
    /**
     * Find zero or one OutputAC that matches the filter.
     * @param {OutputACFindUniqueArgs} args - Arguments to find a OutputAC
     * @example
     * // Get one OutputAC
     * const outputAC = await prisma.outputAC.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OutputACFindUniqueArgs>(args: SelectSubset<T, OutputACFindUniqueArgs<ExtArgs>>): Prisma__OutputACClient<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OutputAC that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OutputACFindUniqueOrThrowArgs} args - Arguments to find a OutputAC
     * @example
     * // Get one OutputAC
     * const outputAC = await prisma.outputAC.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OutputACFindUniqueOrThrowArgs>(args: SelectSubset<T, OutputACFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OutputACClient<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OutputAC that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutputACFindFirstArgs} args - Arguments to find a OutputAC
     * @example
     * // Get one OutputAC
     * const outputAC = await prisma.outputAC.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OutputACFindFirstArgs>(args?: SelectSubset<T, OutputACFindFirstArgs<ExtArgs>>): Prisma__OutputACClient<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OutputAC that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutputACFindFirstOrThrowArgs} args - Arguments to find a OutputAC
     * @example
     * // Get one OutputAC
     * const outputAC = await prisma.outputAC.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OutputACFindFirstOrThrowArgs>(args?: SelectSubset<T, OutputACFindFirstOrThrowArgs<ExtArgs>>): Prisma__OutputACClient<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OutputACS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutputACFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OutputACS
     * const outputACS = await prisma.outputAC.findMany()
     * 
     * // Get first 10 OutputACS
     * const outputACS = await prisma.outputAC.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const outputACWithIdOnly = await prisma.outputAC.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OutputACFindManyArgs>(args?: SelectSubset<T, OutputACFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OutputAC.
     * @param {OutputACCreateArgs} args - Arguments to create a OutputAC.
     * @example
     * // Create one OutputAC
     * const OutputAC = await prisma.outputAC.create({
     *   data: {
     *     // ... data to create a OutputAC
     *   }
     * })
     * 
     */
    create<T extends OutputACCreateArgs>(args: SelectSubset<T, OutputACCreateArgs<ExtArgs>>): Prisma__OutputACClient<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OutputACS.
     * @param {OutputACCreateManyArgs} args - Arguments to create many OutputACS.
     * @example
     * // Create many OutputACS
     * const outputAC = await prisma.outputAC.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OutputACCreateManyArgs>(args?: SelectSubset<T, OutputACCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OutputACS and returns the data saved in the database.
     * @param {OutputACCreateManyAndReturnArgs} args - Arguments to create many OutputACS.
     * @example
     * // Create many OutputACS
     * const outputAC = await prisma.outputAC.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OutputACS and only return the `id`
     * const outputACWithIdOnly = await prisma.outputAC.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OutputACCreateManyAndReturnArgs>(args?: SelectSubset<T, OutputACCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OutputAC.
     * @param {OutputACDeleteArgs} args - Arguments to delete one OutputAC.
     * @example
     * // Delete one OutputAC
     * const OutputAC = await prisma.outputAC.delete({
     *   where: {
     *     // ... filter to delete one OutputAC
     *   }
     * })
     * 
     */
    delete<T extends OutputACDeleteArgs>(args: SelectSubset<T, OutputACDeleteArgs<ExtArgs>>): Prisma__OutputACClient<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OutputAC.
     * @param {OutputACUpdateArgs} args - Arguments to update one OutputAC.
     * @example
     * // Update one OutputAC
     * const outputAC = await prisma.outputAC.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OutputACUpdateArgs>(args: SelectSubset<T, OutputACUpdateArgs<ExtArgs>>): Prisma__OutputACClient<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OutputACS.
     * @param {OutputACDeleteManyArgs} args - Arguments to filter OutputACS to delete.
     * @example
     * // Delete a few OutputACS
     * const { count } = await prisma.outputAC.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OutputACDeleteManyArgs>(args?: SelectSubset<T, OutputACDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OutputACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutputACUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OutputACS
     * const outputAC = await prisma.outputAC.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OutputACUpdateManyArgs>(args: SelectSubset<T, OutputACUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OutputAC.
     * @param {OutputACUpsertArgs} args - Arguments to update or create a OutputAC.
     * @example
     * // Update or create a OutputAC
     * const outputAC = await prisma.outputAC.upsert({
     *   create: {
     *     // ... data to create a OutputAC
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OutputAC we want to update
     *   }
     * })
     */
    upsert<T extends OutputACUpsertArgs>(args: SelectSubset<T, OutputACUpsertArgs<ExtArgs>>): Prisma__OutputACClient<$Result.GetResult<Prisma.$OutputACPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OutputACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutputACCountArgs} args - Arguments to filter OutputACS to count.
     * @example
     * // Count the number of OutputACS
     * const count = await prisma.outputAC.count({
     *   where: {
     *     // ... the filter for the OutputACS we want to count
     *   }
     * })
    **/
    count<T extends OutputACCountArgs>(
      args?: Subset<T, OutputACCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OutputACCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OutputAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutputACAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OutputACAggregateArgs>(args: Subset<T, OutputACAggregateArgs>): Prisma.PrismaPromise<GetOutputACAggregateType<T>>

    /**
     * Group by OutputAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutputACGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OutputACGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OutputACGroupByArgs['orderBy'] }
        : { orderBy?: OutputACGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OutputACGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOutputACGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OutputAC model
   */
  readonly fields: OutputACFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OutputAC.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OutputACClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OutputAC model
   */ 
  interface OutputACFieldRefs {
    readonly id: FieldRef<"OutputAC", 'Int'>
    readonly timestamp: FieldRef<"OutputAC", 'DateTime'>
    readonly Auto: FieldRef<"OutputAC", 'Boolean'>
    readonly AC: FieldRef<"OutputAC", 'Boolean'>
    readonly purifier: FieldRef<"OutputAC", 'Boolean'>
    readonly fan: FieldRef<"OutputAC", 'Boolean'>
    readonly lamp: FieldRef<"OutputAC", 'Boolean'>
    readonly updatedAt: FieldRef<"OutputAC", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OutputAC findUnique
   */
  export type OutputACFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
    /**
     * Filter, which OutputAC to fetch.
     */
    where: OutputACWhereUniqueInput
  }

  /**
   * OutputAC findUniqueOrThrow
   */
  export type OutputACFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
    /**
     * Filter, which OutputAC to fetch.
     */
    where: OutputACWhereUniqueInput
  }

  /**
   * OutputAC findFirst
   */
  export type OutputACFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
    /**
     * Filter, which OutputAC to fetch.
     */
    where?: OutputACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutputACS to fetch.
     */
    orderBy?: OutputACOrderByWithRelationInput | OutputACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OutputACS.
     */
    cursor?: OutputACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutputACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutputACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OutputACS.
     */
    distinct?: OutputACScalarFieldEnum | OutputACScalarFieldEnum[]
  }

  /**
   * OutputAC findFirstOrThrow
   */
  export type OutputACFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
    /**
     * Filter, which OutputAC to fetch.
     */
    where?: OutputACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutputACS to fetch.
     */
    orderBy?: OutputACOrderByWithRelationInput | OutputACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OutputACS.
     */
    cursor?: OutputACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutputACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutputACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OutputACS.
     */
    distinct?: OutputACScalarFieldEnum | OutputACScalarFieldEnum[]
  }

  /**
   * OutputAC findMany
   */
  export type OutputACFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
    /**
     * Filter, which OutputACS to fetch.
     */
    where?: OutputACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutputACS to fetch.
     */
    orderBy?: OutputACOrderByWithRelationInput | OutputACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OutputACS.
     */
    cursor?: OutputACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutputACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutputACS.
     */
    skip?: number
    distinct?: OutputACScalarFieldEnum | OutputACScalarFieldEnum[]
  }

  /**
   * OutputAC create
   */
  export type OutputACCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
    /**
     * The data needed to create a OutputAC.
     */
    data: XOR<OutputACCreateInput, OutputACUncheckedCreateInput>
  }

  /**
   * OutputAC createMany
   */
  export type OutputACCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OutputACS.
     */
    data: OutputACCreateManyInput | OutputACCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OutputAC createManyAndReturn
   */
  export type OutputACCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OutputACS.
     */
    data: OutputACCreateManyInput | OutputACCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OutputAC update
   */
  export type OutputACUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
    /**
     * The data needed to update a OutputAC.
     */
    data: XOR<OutputACUpdateInput, OutputACUncheckedUpdateInput>
    /**
     * Choose, which OutputAC to update.
     */
    where: OutputACWhereUniqueInput
  }

  /**
   * OutputAC updateMany
   */
  export type OutputACUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OutputACS.
     */
    data: XOR<OutputACUpdateManyMutationInput, OutputACUncheckedUpdateManyInput>
    /**
     * Filter which OutputACS to update
     */
    where?: OutputACWhereInput
  }

  /**
   * OutputAC upsert
   */
  export type OutputACUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
    /**
     * The filter to search for the OutputAC to update in case it exists.
     */
    where: OutputACWhereUniqueInput
    /**
     * In case the OutputAC found by the `where` argument doesn't exist, create a new OutputAC with this data.
     */
    create: XOR<OutputACCreateInput, OutputACUncheckedCreateInput>
    /**
     * In case the OutputAC was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OutputACUpdateInput, OutputACUncheckedUpdateInput>
  }

  /**
   * OutputAC delete
   */
  export type OutputACDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
    /**
     * Filter which OutputAC to delete.
     */
    where: OutputACWhereUniqueInput
  }

  /**
   * OutputAC deleteMany
   */
  export type OutputACDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OutputACS to delete
     */
    where?: OutputACWhereInput
  }

  /**
   * OutputAC without action
   */
  export type OutputACDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutputAC
     */
    select?: OutputACSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    noReg: 'noReg',
    profile: 'profile',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const DeviceACScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    SSID: 'SSID',
    PASSWORD: 'PASSWORD',
    IP: 'IP',
    updatedAt: 'updatedAt'
  };

  export type DeviceACScalarFieldEnum = (typeof DeviceACScalarFieldEnum)[keyof typeof DeviceACScalarFieldEnum]


  export const LogsACScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    voltage: 'voltage',
    current: 'current',
    power: 'power',
    watthours: 'watthours',
    energy: 'energy',
    frequency: 'frequency',
    PF: 'PF',
    temp: 'temp',
    hum: 'hum',
    door: 'door',
    updatedAt: 'updatedAt'
  };

  export type LogsACScalarFieldEnum = (typeof LogsACScalarFieldEnum)[keyof typeof LogsACScalarFieldEnum]


  export const SensorACScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    voltage: 'voltage',
    current: 'current',
    power: 'power',
    watthours: 'watthours',
    energy: 'energy',
    frequency: 'frequency',
    PF: 'PF',
    temp: 'temp',
    hum: 'hum',
    door: 'door',
    updatedAt: 'updatedAt'
  };

  export type SensorACScalarFieldEnum = (typeof SensorACScalarFieldEnum)[keyof typeof SensorACScalarFieldEnum]


  export const OutputACScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    Auto: 'Auto',
    AC: 'AC',
    purifier: 'purifier',
    fan: 'fan',
    lamp: 'lamp',
    updatedAt: 'updatedAt'
  };

  export type OutputACScalarFieldEnum = (typeof OutputACScalarFieldEnum)[keyof typeof OutputACScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    email?: StringFilter<"Account"> | string
    password?: StringFilter<"Account"> | string
    role?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    contact?: XOR<ContactNullableRelationFilter, ContactWhereInput> | null
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contact?: ContactOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    password?: StringFilter<"Account"> | string
    role?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    contact?: XOR<ContactNullableRelationFilter, ContactWhereInput> | null
  }, "id" | "email">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    email?: StringWithAggregatesFilter<"Account"> | string
    password?: StringWithAggregatesFilter<"Account"> | string
    role?: StringWithAggregatesFilter<"Account"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: StringFilter<"Contact"> | string
    firstName?: StringFilter<"Contact"> | string
    lastName?: StringFilter<"Contact"> | string
    email?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    noReg?: StringNullableFilter<"Contact"> | string | null
    profile?: StringNullableFilter<"Contact"> | string | null
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    noReg?: SortOrderInput | SortOrder
    profile?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    firstName?: StringFilter<"Contact"> | string
    lastName?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    noReg?: StringNullableFilter<"Contact"> | string | null
    profile?: StringNullableFilter<"Contact"> | string | null
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id" | "email">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    noReg?: SortOrderInput | SortOrder
    profile?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contact"> | string
    firstName?: StringWithAggregatesFilter<"Contact"> | string
    lastName?: StringWithAggregatesFilter<"Contact"> | string
    email?: StringWithAggregatesFilter<"Contact"> | string
    phone?: StringWithAggregatesFilter<"Contact"> | string
    noReg?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    profile?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
  }

  export type deviceACWhereInput = {
    AND?: deviceACWhereInput | deviceACWhereInput[]
    OR?: deviceACWhereInput[]
    NOT?: deviceACWhereInput | deviceACWhereInput[]
    id?: IntFilter<"deviceAC"> | number
    timestamp?: DateTimeFilter<"deviceAC"> | Date | string
    SSID?: StringFilter<"deviceAC"> | string
    PASSWORD?: StringFilter<"deviceAC"> | string
    IP?: StringFilter<"deviceAC"> | string
    updatedAt?: DateTimeFilter<"deviceAC"> | Date | string
  }

  export type deviceACOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    SSID?: SortOrder
    PASSWORD?: SortOrder
    IP?: SortOrder
    updatedAt?: SortOrder
  }

  export type deviceACWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: deviceACWhereInput | deviceACWhereInput[]
    OR?: deviceACWhereInput[]
    NOT?: deviceACWhereInput | deviceACWhereInput[]
    timestamp?: DateTimeFilter<"deviceAC"> | Date | string
    SSID?: StringFilter<"deviceAC"> | string
    PASSWORD?: StringFilter<"deviceAC"> | string
    IP?: StringFilter<"deviceAC"> | string
    updatedAt?: DateTimeFilter<"deviceAC"> | Date | string
  }, "id">

  export type deviceACOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    SSID?: SortOrder
    PASSWORD?: SortOrder
    IP?: SortOrder
    updatedAt?: SortOrder
    _count?: deviceACCountOrderByAggregateInput
    _avg?: deviceACAvgOrderByAggregateInput
    _max?: deviceACMaxOrderByAggregateInput
    _min?: deviceACMinOrderByAggregateInput
    _sum?: deviceACSumOrderByAggregateInput
  }

  export type deviceACScalarWhereWithAggregatesInput = {
    AND?: deviceACScalarWhereWithAggregatesInput | deviceACScalarWhereWithAggregatesInput[]
    OR?: deviceACScalarWhereWithAggregatesInput[]
    NOT?: deviceACScalarWhereWithAggregatesInput | deviceACScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"deviceAC"> | number
    timestamp?: DateTimeWithAggregatesFilter<"deviceAC"> | Date | string
    SSID?: StringWithAggregatesFilter<"deviceAC"> | string
    PASSWORD?: StringWithAggregatesFilter<"deviceAC"> | string
    IP?: StringWithAggregatesFilter<"deviceAC"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"deviceAC"> | Date | string
  }

  export type LogsACWhereInput = {
    AND?: LogsACWhereInput | LogsACWhereInput[]
    OR?: LogsACWhereInput[]
    NOT?: LogsACWhereInput | LogsACWhereInput[]
    id?: IntFilter<"LogsAC"> | number
    timestamp?: DateTimeFilter<"LogsAC"> | Date | string
    voltage?: FloatFilter<"LogsAC"> | number
    current?: FloatFilter<"LogsAC"> | number
    power?: FloatFilter<"LogsAC"> | number
    watthours?: FloatFilter<"LogsAC"> | number
    energy?: FloatFilter<"LogsAC"> | number
    frequency?: FloatFilter<"LogsAC"> | number
    PF?: FloatFilter<"LogsAC"> | number
    temp?: FloatFilter<"LogsAC"> | number
    hum?: FloatFilter<"LogsAC"> | number
    door?: BoolFilter<"LogsAC"> | boolean
    updatedAt?: DateTimeFilter<"LogsAC"> | Date | string
  }

  export type LogsACOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
  }

  export type LogsACWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LogsACWhereInput | LogsACWhereInput[]
    OR?: LogsACWhereInput[]
    NOT?: LogsACWhereInput | LogsACWhereInput[]
    timestamp?: DateTimeFilter<"LogsAC"> | Date | string
    voltage?: FloatFilter<"LogsAC"> | number
    current?: FloatFilter<"LogsAC"> | number
    power?: FloatFilter<"LogsAC"> | number
    watthours?: FloatFilter<"LogsAC"> | number
    energy?: FloatFilter<"LogsAC"> | number
    frequency?: FloatFilter<"LogsAC"> | number
    PF?: FloatFilter<"LogsAC"> | number
    temp?: FloatFilter<"LogsAC"> | number
    hum?: FloatFilter<"LogsAC"> | number
    door?: BoolFilter<"LogsAC"> | boolean
    updatedAt?: DateTimeFilter<"LogsAC"> | Date | string
  }, "id">

  export type LogsACOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
    _count?: LogsACCountOrderByAggregateInput
    _avg?: LogsACAvgOrderByAggregateInput
    _max?: LogsACMaxOrderByAggregateInput
    _min?: LogsACMinOrderByAggregateInput
    _sum?: LogsACSumOrderByAggregateInput
  }

  export type LogsACScalarWhereWithAggregatesInput = {
    AND?: LogsACScalarWhereWithAggregatesInput | LogsACScalarWhereWithAggregatesInput[]
    OR?: LogsACScalarWhereWithAggregatesInput[]
    NOT?: LogsACScalarWhereWithAggregatesInput | LogsACScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LogsAC"> | number
    timestamp?: DateTimeWithAggregatesFilter<"LogsAC"> | Date | string
    voltage?: FloatWithAggregatesFilter<"LogsAC"> | number
    current?: FloatWithAggregatesFilter<"LogsAC"> | number
    power?: FloatWithAggregatesFilter<"LogsAC"> | number
    watthours?: FloatWithAggregatesFilter<"LogsAC"> | number
    energy?: FloatWithAggregatesFilter<"LogsAC"> | number
    frequency?: FloatWithAggregatesFilter<"LogsAC"> | number
    PF?: FloatWithAggregatesFilter<"LogsAC"> | number
    temp?: FloatWithAggregatesFilter<"LogsAC"> | number
    hum?: FloatWithAggregatesFilter<"LogsAC"> | number
    door?: BoolWithAggregatesFilter<"LogsAC"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"LogsAC"> | Date | string
  }

  export type SensorACWhereInput = {
    AND?: SensorACWhereInput | SensorACWhereInput[]
    OR?: SensorACWhereInput[]
    NOT?: SensorACWhereInput | SensorACWhereInput[]
    id?: IntFilter<"SensorAC"> | number
    timestamp?: DateTimeFilter<"SensorAC"> | Date | string
    voltage?: FloatFilter<"SensorAC"> | number
    current?: FloatFilter<"SensorAC"> | number
    power?: FloatFilter<"SensorAC"> | number
    watthours?: FloatFilter<"SensorAC"> | number
    energy?: FloatFilter<"SensorAC"> | number
    frequency?: FloatFilter<"SensorAC"> | number
    PF?: FloatFilter<"SensorAC"> | number
    temp?: FloatFilter<"SensorAC"> | number
    hum?: FloatFilter<"SensorAC"> | number
    door?: BoolFilter<"SensorAC"> | boolean
    updatedAt?: DateTimeFilter<"SensorAC"> | Date | string
  }

  export type SensorACOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
  }

  export type SensorACWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SensorACWhereInput | SensorACWhereInput[]
    OR?: SensorACWhereInput[]
    NOT?: SensorACWhereInput | SensorACWhereInput[]
    timestamp?: DateTimeFilter<"SensorAC"> | Date | string
    voltage?: FloatFilter<"SensorAC"> | number
    current?: FloatFilter<"SensorAC"> | number
    power?: FloatFilter<"SensorAC"> | number
    watthours?: FloatFilter<"SensorAC"> | number
    energy?: FloatFilter<"SensorAC"> | number
    frequency?: FloatFilter<"SensorAC"> | number
    PF?: FloatFilter<"SensorAC"> | number
    temp?: FloatFilter<"SensorAC"> | number
    hum?: FloatFilter<"SensorAC"> | number
    door?: BoolFilter<"SensorAC"> | boolean
    updatedAt?: DateTimeFilter<"SensorAC"> | Date | string
  }, "id">

  export type SensorACOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
    _count?: SensorACCountOrderByAggregateInput
    _avg?: SensorACAvgOrderByAggregateInput
    _max?: SensorACMaxOrderByAggregateInput
    _min?: SensorACMinOrderByAggregateInput
    _sum?: SensorACSumOrderByAggregateInput
  }

  export type SensorACScalarWhereWithAggregatesInput = {
    AND?: SensorACScalarWhereWithAggregatesInput | SensorACScalarWhereWithAggregatesInput[]
    OR?: SensorACScalarWhereWithAggregatesInput[]
    NOT?: SensorACScalarWhereWithAggregatesInput | SensorACScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SensorAC"> | number
    timestamp?: DateTimeWithAggregatesFilter<"SensorAC"> | Date | string
    voltage?: FloatWithAggregatesFilter<"SensorAC"> | number
    current?: FloatWithAggregatesFilter<"SensorAC"> | number
    power?: FloatWithAggregatesFilter<"SensorAC"> | number
    watthours?: FloatWithAggregatesFilter<"SensorAC"> | number
    energy?: FloatWithAggregatesFilter<"SensorAC"> | number
    frequency?: FloatWithAggregatesFilter<"SensorAC"> | number
    PF?: FloatWithAggregatesFilter<"SensorAC"> | number
    temp?: FloatWithAggregatesFilter<"SensorAC"> | number
    hum?: FloatWithAggregatesFilter<"SensorAC"> | number
    door?: BoolWithAggregatesFilter<"SensorAC"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"SensorAC"> | Date | string
  }

  export type OutputACWhereInput = {
    AND?: OutputACWhereInput | OutputACWhereInput[]
    OR?: OutputACWhereInput[]
    NOT?: OutputACWhereInput | OutputACWhereInput[]
    id?: IntFilter<"OutputAC"> | number
    timestamp?: DateTimeFilter<"OutputAC"> | Date | string
    Auto?: BoolFilter<"OutputAC"> | boolean
    AC?: BoolFilter<"OutputAC"> | boolean
    purifier?: BoolFilter<"OutputAC"> | boolean
    fan?: BoolFilter<"OutputAC"> | boolean
    lamp?: BoolFilter<"OutputAC"> | boolean
    updatedAt?: DateTimeFilter<"OutputAC"> | Date | string
  }

  export type OutputACOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    Auto?: SortOrder
    AC?: SortOrder
    purifier?: SortOrder
    fan?: SortOrder
    lamp?: SortOrder
    updatedAt?: SortOrder
  }

  export type OutputACWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OutputACWhereInput | OutputACWhereInput[]
    OR?: OutputACWhereInput[]
    NOT?: OutputACWhereInput | OutputACWhereInput[]
    timestamp?: DateTimeFilter<"OutputAC"> | Date | string
    Auto?: BoolFilter<"OutputAC"> | boolean
    AC?: BoolFilter<"OutputAC"> | boolean
    purifier?: BoolFilter<"OutputAC"> | boolean
    fan?: BoolFilter<"OutputAC"> | boolean
    lamp?: BoolFilter<"OutputAC"> | boolean
    updatedAt?: DateTimeFilter<"OutputAC"> | Date | string
  }, "id">

  export type OutputACOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    Auto?: SortOrder
    AC?: SortOrder
    purifier?: SortOrder
    fan?: SortOrder
    lamp?: SortOrder
    updatedAt?: SortOrder
    _count?: OutputACCountOrderByAggregateInput
    _avg?: OutputACAvgOrderByAggregateInput
    _max?: OutputACMaxOrderByAggregateInput
    _min?: OutputACMinOrderByAggregateInput
    _sum?: OutputACSumOrderByAggregateInput
  }

  export type OutputACScalarWhereWithAggregatesInput = {
    AND?: OutputACScalarWhereWithAggregatesInput | OutputACScalarWhereWithAggregatesInput[]
    OR?: OutputACScalarWhereWithAggregatesInput[]
    NOT?: OutputACScalarWhereWithAggregatesInput | OutputACScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OutputAC"> | number
    timestamp?: DateTimeWithAggregatesFilter<"OutputAC"> | Date | string
    Auto?: BoolWithAggregatesFilter<"OutputAC"> | boolean
    AC?: BoolWithAggregatesFilter<"OutputAC"> | boolean
    purifier?: BoolWithAggregatesFilter<"OutputAC"> | boolean
    fan?: BoolWithAggregatesFilter<"OutputAC"> | boolean
    lamp?: BoolWithAggregatesFilter<"OutputAC"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"OutputAC"> | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contact?: ContactCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contact?: ContactUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contact?: ContactUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contact?: ContactUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateInput = {
    firstName: string
    lastName: string
    email: string
    phone: string
    noReg?: string | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutContactInput
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    noReg?: string | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    noReg?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    noReg?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    noReg?: string | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    noReg?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    noReg?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type deviceACCreateInput = {
    timestamp?: Date | string
    SSID: string
    PASSWORD: string
    IP: string
    updatedAt?: Date | string
  }

  export type deviceACUncheckedCreateInput = {
    id?: number
    timestamp?: Date | string
    SSID: string
    PASSWORD: string
    IP: string
    updatedAt?: Date | string
  }

  export type deviceACUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    SSID?: StringFieldUpdateOperationsInput | string
    PASSWORD?: StringFieldUpdateOperationsInput | string
    IP?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type deviceACUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    SSID?: StringFieldUpdateOperationsInput | string
    PASSWORD?: StringFieldUpdateOperationsInput | string
    IP?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type deviceACCreateManyInput = {
    id?: number
    timestamp?: Date | string
    SSID: string
    PASSWORD: string
    IP: string
    updatedAt?: Date | string
  }

  export type deviceACUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    SSID?: StringFieldUpdateOperationsInput | string
    PASSWORD?: StringFieldUpdateOperationsInput | string
    IP?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type deviceACUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    SSID?: StringFieldUpdateOperationsInput | string
    PASSWORD?: StringFieldUpdateOperationsInput | string
    IP?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsACCreateInput = {
    timestamp?: Date | string
    voltage?: number
    current?: number
    power?: number
    watthours?: number
    energy?: number
    frequency?: number
    PF?: number
    temp?: number
    hum?: number
    door?: boolean
    updatedAt?: Date | string
  }

  export type LogsACUncheckedCreateInput = {
    id?: number
    timestamp?: Date | string
    voltage?: number
    current?: number
    power?: number
    watthours?: number
    energy?: number
    frequency?: number
    PF?: number
    temp?: number
    hum?: number
    door?: boolean
    updatedAt?: Date | string
  }

  export type LogsACUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    voltage?: FloatFieldUpdateOperationsInput | number
    current?: FloatFieldUpdateOperationsInput | number
    power?: FloatFieldUpdateOperationsInput | number
    watthours?: FloatFieldUpdateOperationsInput | number
    energy?: FloatFieldUpdateOperationsInput | number
    frequency?: FloatFieldUpdateOperationsInput | number
    PF?: FloatFieldUpdateOperationsInput | number
    temp?: FloatFieldUpdateOperationsInput | number
    hum?: FloatFieldUpdateOperationsInput | number
    door?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsACUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    voltage?: FloatFieldUpdateOperationsInput | number
    current?: FloatFieldUpdateOperationsInput | number
    power?: FloatFieldUpdateOperationsInput | number
    watthours?: FloatFieldUpdateOperationsInput | number
    energy?: FloatFieldUpdateOperationsInput | number
    frequency?: FloatFieldUpdateOperationsInput | number
    PF?: FloatFieldUpdateOperationsInput | number
    temp?: FloatFieldUpdateOperationsInput | number
    hum?: FloatFieldUpdateOperationsInput | number
    door?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsACCreateManyInput = {
    id?: number
    timestamp?: Date | string
    voltage?: number
    current?: number
    power?: number
    watthours?: number
    energy?: number
    frequency?: number
    PF?: number
    temp?: number
    hum?: number
    door?: boolean
    updatedAt?: Date | string
  }

  export type LogsACUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    voltage?: FloatFieldUpdateOperationsInput | number
    current?: FloatFieldUpdateOperationsInput | number
    power?: FloatFieldUpdateOperationsInput | number
    watthours?: FloatFieldUpdateOperationsInput | number
    energy?: FloatFieldUpdateOperationsInput | number
    frequency?: FloatFieldUpdateOperationsInput | number
    PF?: FloatFieldUpdateOperationsInput | number
    temp?: FloatFieldUpdateOperationsInput | number
    hum?: FloatFieldUpdateOperationsInput | number
    door?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsACUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    voltage?: FloatFieldUpdateOperationsInput | number
    current?: FloatFieldUpdateOperationsInput | number
    power?: FloatFieldUpdateOperationsInput | number
    watthours?: FloatFieldUpdateOperationsInput | number
    energy?: FloatFieldUpdateOperationsInput | number
    frequency?: FloatFieldUpdateOperationsInput | number
    PF?: FloatFieldUpdateOperationsInput | number
    temp?: FloatFieldUpdateOperationsInput | number
    hum?: FloatFieldUpdateOperationsInput | number
    door?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SensorACCreateInput = {
    timestamp?: Date | string
    voltage?: number
    current?: number
    power?: number
    watthours?: number
    energy?: number
    frequency?: number
    PF?: number
    temp?: number
    hum?: number
    door?: boolean
    updatedAt?: Date | string
  }

  export type SensorACUncheckedCreateInput = {
    id?: number
    timestamp?: Date | string
    voltage?: number
    current?: number
    power?: number
    watthours?: number
    energy?: number
    frequency?: number
    PF?: number
    temp?: number
    hum?: number
    door?: boolean
    updatedAt?: Date | string
  }

  export type SensorACUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    voltage?: FloatFieldUpdateOperationsInput | number
    current?: FloatFieldUpdateOperationsInput | number
    power?: FloatFieldUpdateOperationsInput | number
    watthours?: FloatFieldUpdateOperationsInput | number
    energy?: FloatFieldUpdateOperationsInput | number
    frequency?: FloatFieldUpdateOperationsInput | number
    PF?: FloatFieldUpdateOperationsInput | number
    temp?: FloatFieldUpdateOperationsInput | number
    hum?: FloatFieldUpdateOperationsInput | number
    door?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SensorACUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    voltage?: FloatFieldUpdateOperationsInput | number
    current?: FloatFieldUpdateOperationsInput | number
    power?: FloatFieldUpdateOperationsInput | number
    watthours?: FloatFieldUpdateOperationsInput | number
    energy?: FloatFieldUpdateOperationsInput | number
    frequency?: FloatFieldUpdateOperationsInput | number
    PF?: FloatFieldUpdateOperationsInput | number
    temp?: FloatFieldUpdateOperationsInput | number
    hum?: FloatFieldUpdateOperationsInput | number
    door?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SensorACCreateManyInput = {
    id?: number
    timestamp?: Date | string
    voltage?: number
    current?: number
    power?: number
    watthours?: number
    energy?: number
    frequency?: number
    PF?: number
    temp?: number
    hum?: number
    door?: boolean
    updatedAt?: Date | string
  }

  export type SensorACUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    voltage?: FloatFieldUpdateOperationsInput | number
    current?: FloatFieldUpdateOperationsInput | number
    power?: FloatFieldUpdateOperationsInput | number
    watthours?: FloatFieldUpdateOperationsInput | number
    energy?: FloatFieldUpdateOperationsInput | number
    frequency?: FloatFieldUpdateOperationsInput | number
    PF?: FloatFieldUpdateOperationsInput | number
    temp?: FloatFieldUpdateOperationsInput | number
    hum?: FloatFieldUpdateOperationsInput | number
    door?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SensorACUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    voltage?: FloatFieldUpdateOperationsInput | number
    current?: FloatFieldUpdateOperationsInput | number
    power?: FloatFieldUpdateOperationsInput | number
    watthours?: FloatFieldUpdateOperationsInput | number
    energy?: FloatFieldUpdateOperationsInput | number
    frequency?: FloatFieldUpdateOperationsInput | number
    PF?: FloatFieldUpdateOperationsInput | number
    temp?: FloatFieldUpdateOperationsInput | number
    hum?: FloatFieldUpdateOperationsInput | number
    door?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutputACCreateInput = {
    timestamp?: Date | string
    Auto?: boolean
    AC?: boolean
    purifier?: boolean
    fan?: boolean
    lamp?: boolean
    updatedAt?: Date | string
  }

  export type OutputACUncheckedCreateInput = {
    id?: number
    timestamp?: Date | string
    Auto?: boolean
    AC?: boolean
    purifier?: boolean
    fan?: boolean
    lamp?: boolean
    updatedAt?: Date | string
  }

  export type OutputACUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Auto?: BoolFieldUpdateOperationsInput | boolean
    AC?: BoolFieldUpdateOperationsInput | boolean
    purifier?: BoolFieldUpdateOperationsInput | boolean
    fan?: BoolFieldUpdateOperationsInput | boolean
    lamp?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutputACUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Auto?: BoolFieldUpdateOperationsInput | boolean
    AC?: BoolFieldUpdateOperationsInput | boolean
    purifier?: BoolFieldUpdateOperationsInput | boolean
    fan?: BoolFieldUpdateOperationsInput | boolean
    lamp?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutputACCreateManyInput = {
    id?: number
    timestamp?: Date | string
    Auto?: boolean
    AC?: boolean
    purifier?: boolean
    fan?: boolean
    lamp?: boolean
    updatedAt?: Date | string
  }

  export type OutputACUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Auto?: BoolFieldUpdateOperationsInput | boolean
    AC?: BoolFieldUpdateOperationsInput | boolean
    purifier?: BoolFieldUpdateOperationsInput | boolean
    fan?: BoolFieldUpdateOperationsInput | boolean
    lamp?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutputACUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Auto?: BoolFieldUpdateOperationsInput | boolean
    AC?: BoolFieldUpdateOperationsInput | boolean
    purifier?: BoolFieldUpdateOperationsInput | boolean
    fan?: BoolFieldUpdateOperationsInput | boolean
    lamp?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ContactNullableRelationFilter = {
    is?: ContactWhereInput | null
    isNot?: ContactWhereInput | null
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    noReg?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    noReg?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    noReg?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type deviceACCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    SSID?: SortOrder
    PASSWORD?: SortOrder
    IP?: SortOrder
    updatedAt?: SortOrder
  }

  export type deviceACAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type deviceACMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    SSID?: SortOrder
    PASSWORD?: SortOrder
    IP?: SortOrder
    updatedAt?: SortOrder
  }

  export type deviceACMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    SSID?: SortOrder
    PASSWORD?: SortOrder
    IP?: SortOrder
    updatedAt?: SortOrder
  }

  export type deviceACSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LogsACCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
  }

  export type LogsACAvgOrderByAggregateInput = {
    id?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
  }

  export type LogsACMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
  }

  export type LogsACMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
  }

  export type LogsACSumOrderByAggregateInput = {
    id?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SensorACCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
  }

  export type SensorACAvgOrderByAggregateInput = {
    id?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
  }

  export type SensorACMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
  }

  export type SensorACMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
    door?: SortOrder
    updatedAt?: SortOrder
  }

  export type SensorACSumOrderByAggregateInput = {
    id?: SortOrder
    voltage?: SortOrder
    current?: SortOrder
    power?: SortOrder
    watthours?: SortOrder
    energy?: SortOrder
    frequency?: SortOrder
    PF?: SortOrder
    temp?: SortOrder
    hum?: SortOrder
  }

  export type OutputACCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    Auto?: SortOrder
    AC?: SortOrder
    purifier?: SortOrder
    fan?: SortOrder
    lamp?: SortOrder
    updatedAt?: SortOrder
  }

  export type OutputACAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OutputACMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    Auto?: SortOrder
    AC?: SortOrder
    purifier?: SortOrder
    fan?: SortOrder
    lamp?: SortOrder
    updatedAt?: SortOrder
  }

  export type OutputACMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    Auto?: SortOrder
    AC?: SortOrder
    purifier?: SortOrder
    fan?: SortOrder
    lamp?: SortOrder
    updatedAt?: SortOrder
  }

  export type OutputACSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactCreateNestedOneWithoutAccountInput = {
    create?: XOR<ContactCreateWithoutAccountInput, ContactUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ContactCreateOrConnectWithoutAccountInput
    connect?: ContactWhereUniqueInput
  }

  export type ContactUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<ContactCreateWithoutAccountInput, ContactUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ContactCreateOrConnectWithoutAccountInput
    connect?: ContactWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ContactUpdateOneWithoutAccountNestedInput = {
    create?: XOR<ContactCreateWithoutAccountInput, ContactUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ContactCreateOrConnectWithoutAccountInput
    upsert?: ContactUpsertWithoutAccountInput
    disconnect?: ContactWhereInput | boolean
    delete?: ContactWhereInput | boolean
    connect?: ContactWhereUniqueInput
    update?: XOR<XOR<ContactUpdateToOneWithWhereWithoutAccountInput, ContactUpdateWithoutAccountInput>, ContactUncheckedUpdateWithoutAccountInput>
  }

  export type ContactUncheckedUpdateOneWithoutAccountNestedInput = {
    create?: XOR<ContactCreateWithoutAccountInput, ContactUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ContactCreateOrConnectWithoutAccountInput
    upsert?: ContactUpsertWithoutAccountInput
    disconnect?: ContactWhereInput | boolean
    delete?: ContactWhereInput | boolean
    connect?: ContactWhereUniqueInput
    update?: XOR<XOR<ContactUpdateToOneWithWhereWithoutAccountInput, ContactUpdateWithoutAccountInput>, ContactUncheckedUpdateWithoutAccountInput>
  }

  export type AccountCreateNestedOneWithoutContactInput = {
    create?: XOR<AccountCreateWithoutContactInput, AccountUncheckedCreateWithoutContactInput>
    connectOrCreate?: AccountCreateOrConnectWithoutContactInput
    connect?: AccountWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AccountUpdateOneRequiredWithoutContactNestedInput = {
    create?: XOR<AccountCreateWithoutContactInput, AccountUncheckedCreateWithoutContactInput>
    connectOrCreate?: AccountCreateOrConnectWithoutContactInput
    upsert?: AccountUpsertWithoutContactInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutContactInput, AccountUpdateWithoutContactInput>, AccountUncheckedUpdateWithoutContactInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ContactCreateWithoutAccountInput = {
    firstName: string
    lastName: string
    email: string
    phone: string
    noReg?: string | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUncheckedCreateWithoutAccountInput = {
    firstName: string
    lastName: string
    email: string
    phone: string
    noReg?: string | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactCreateOrConnectWithoutAccountInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutAccountInput, ContactUncheckedCreateWithoutAccountInput>
  }

  export type ContactUpsertWithoutAccountInput = {
    update: XOR<ContactUpdateWithoutAccountInput, ContactUncheckedUpdateWithoutAccountInput>
    create: XOR<ContactCreateWithoutAccountInput, ContactUncheckedCreateWithoutAccountInput>
    where?: ContactWhereInput
  }

  export type ContactUpdateToOneWithWhereWithoutAccountInput = {
    where?: ContactWhereInput
    data: XOR<ContactUpdateWithoutAccountInput, ContactUncheckedUpdateWithoutAccountInput>
  }

  export type ContactUpdateWithoutAccountInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    noReg?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateWithoutAccountInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    noReg?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateWithoutContactInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutContactInput = {
    id?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutContactInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutContactInput, AccountUncheckedCreateWithoutContactInput>
  }

  export type AccountUpsertWithoutContactInput = {
    update: XOR<AccountUpdateWithoutContactInput, AccountUncheckedUpdateWithoutContactInput>
    create: XOR<AccountCreateWithoutContactInput, AccountUncheckedCreateWithoutContactInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutContactInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutContactInput, AccountUncheckedUpdateWithoutContactInput>
  }

  export type AccountUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactDefaultArgs instead
     */
    export type ContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactDefaultArgs<ExtArgs>
    /**
     * @deprecated Use deviceACDefaultArgs instead
     */
    export type deviceACArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = deviceACDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LogsACDefaultArgs instead
     */
    export type LogsACArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LogsACDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SensorACDefaultArgs instead
     */
    export type SensorACArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SensorACDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OutputACDefaultArgs instead
     */
    export type OutputACArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OutputACDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}